
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Drink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Drink
 * 
 */
export type DrinkModel = runtime.Types.Result.DefaultSelection<Prisma.$DrinkPayload>

export type AggregateDrink = {
  _count: DrinkCountAggregateOutputType | null
  _avg: DrinkAvgAggregateOutputType | null
  _sum: DrinkSumAggregateOutputType | null
  _min: DrinkMinAggregateOutputType | null
  _max: DrinkMaxAggregateOutputType | null
}

export type DrinkAvgAggregateOutputType = {
  id: number | null
  categoryId: number | null
}

export type DrinkSumAggregateOutputType = {
  id: number | null
  categoryId: number | null
}

export type DrinkMinAggregateOutputType = {
  id: number | null
  name: string | null
  quantity: string | null
  categoryId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DrinkMaxAggregateOutputType = {
  id: number | null
  name: string | null
  quantity: string | null
  categoryId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DrinkCountAggregateOutputType = {
  id: number
  name: number
  quantity: number
  categoryId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DrinkAvgAggregateInputType = {
  id?: true
  categoryId?: true
}

export type DrinkSumAggregateInputType = {
  id?: true
  categoryId?: true
}

export type DrinkMinAggregateInputType = {
  id?: true
  name?: true
  quantity?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
}

export type DrinkMaxAggregateInputType = {
  id?: true
  name?: true
  quantity?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
}

export type DrinkCountAggregateInputType = {
  id?: true
  name?: true
  quantity?: true
  categoryId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DrinkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Drink to aggregate.
   */
  where?: Prisma.DrinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drinks to fetch.
   */
  orderBy?: Prisma.DrinkOrderByWithRelationInput | Prisma.DrinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DrinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Drinks
  **/
  _count?: true | DrinkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DrinkAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DrinkSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DrinkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DrinkMaxAggregateInputType
}

export type GetDrinkAggregateType<T extends DrinkAggregateArgs> = {
      [P in keyof T & keyof AggregateDrink]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDrink[P]>
    : Prisma.GetScalarType<T[P], AggregateDrink[P]>
}




export type DrinkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DrinkWhereInput
  orderBy?: Prisma.DrinkOrderByWithAggregationInput | Prisma.DrinkOrderByWithAggregationInput[]
  by: Prisma.DrinkScalarFieldEnum[] | Prisma.DrinkScalarFieldEnum
  having?: Prisma.DrinkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DrinkCountAggregateInputType | true
  _avg?: DrinkAvgAggregateInputType
  _sum?: DrinkSumAggregateInputType
  _min?: DrinkMinAggregateInputType
  _max?: DrinkMaxAggregateInputType
}

export type DrinkGroupByOutputType = {
  id: number
  name: string
  quantity: string
  categoryId: number
  createdAt: Date
  updatedAt: Date
  _count: DrinkCountAggregateOutputType | null
  _avg: DrinkAvgAggregateOutputType | null
  _sum: DrinkSumAggregateOutputType | null
  _min: DrinkMinAggregateOutputType | null
  _max: DrinkMaxAggregateOutputType | null
}

type GetDrinkGroupByPayload<T extends DrinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DrinkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DrinkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DrinkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DrinkGroupByOutputType[P]>
      }
    >
  >



export type DrinkWhereInput = {
  AND?: Prisma.DrinkWhereInput | Prisma.DrinkWhereInput[]
  OR?: Prisma.DrinkWhereInput[]
  NOT?: Prisma.DrinkWhereInput | Prisma.DrinkWhereInput[]
  id?: Prisma.IntFilter<"Drink"> | number
  name?: Prisma.StringFilter<"Drink"> | string
  quantity?: Prisma.StringFilter<"Drink"> | string
  categoryId?: Prisma.IntFilter<"Drink"> | number
  createdAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}

export type DrinkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  category?: Prisma.CategoryOrderByWithRelationInput
}

export type DrinkWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name_categoryId?: Prisma.DrinkNameCategoryIdCompoundUniqueInput
  AND?: Prisma.DrinkWhereInput | Prisma.DrinkWhereInput[]
  OR?: Prisma.DrinkWhereInput[]
  NOT?: Prisma.DrinkWhereInput | Prisma.DrinkWhereInput[]
  name?: Prisma.StringFilter<"Drink"> | string
  quantity?: Prisma.StringFilter<"Drink"> | string
  categoryId?: Prisma.IntFilter<"Drink"> | number
  createdAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}, "id" | "name_categoryId">

export type DrinkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DrinkCountOrderByAggregateInput
  _avg?: Prisma.DrinkAvgOrderByAggregateInput
  _max?: Prisma.DrinkMaxOrderByAggregateInput
  _min?: Prisma.DrinkMinOrderByAggregateInput
  _sum?: Prisma.DrinkSumOrderByAggregateInput
}

export type DrinkScalarWhereWithAggregatesInput = {
  AND?: Prisma.DrinkScalarWhereWithAggregatesInput | Prisma.DrinkScalarWhereWithAggregatesInput[]
  OR?: Prisma.DrinkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DrinkScalarWhereWithAggregatesInput | Prisma.DrinkScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Drink"> | number
  name?: Prisma.StringWithAggregatesFilter<"Drink"> | string
  quantity?: Prisma.StringWithAggregatesFilter<"Drink"> | string
  categoryId?: Prisma.IntWithAggregatesFilter<"Drink"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Drink"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Drink"> | Date | string
}

export type DrinkCreateInput = {
  name: string
  quantity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  category: Prisma.CategoryCreateNestedOneWithoutDrinksInput
}

export type DrinkUncheckedCreateInput = {
  id?: number
  name: string
  quantity: string
  categoryId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DrinkUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.CategoryUpdateOneRequiredWithoutDrinksNestedInput
}

export type DrinkUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DrinkCreateManyInput = {
  id?: number
  name: string
  quantity: string
  categoryId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DrinkUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DrinkUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DrinkListRelationFilter = {
  every?: Prisma.DrinkWhereInput
  some?: Prisma.DrinkWhereInput
  none?: Prisma.DrinkWhereInput
}

export type DrinkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DrinkNameCategoryIdCompoundUniqueInput = {
  name: string
  categoryId: number
}

export type DrinkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DrinkAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type DrinkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DrinkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DrinkSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type DrinkCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput> | Prisma.DrinkCreateWithoutCategoryInput[] | Prisma.DrinkUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.DrinkCreateOrConnectWithoutCategoryInput | Prisma.DrinkCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.DrinkCreateManyCategoryInputEnvelope
  connect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
}

export type DrinkUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput> | Prisma.DrinkCreateWithoutCategoryInput[] | Prisma.DrinkUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.DrinkCreateOrConnectWithoutCategoryInput | Prisma.DrinkCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.DrinkCreateManyCategoryInputEnvelope
  connect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
}

export type DrinkUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput> | Prisma.DrinkCreateWithoutCategoryInput[] | Prisma.DrinkUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.DrinkCreateOrConnectWithoutCategoryInput | Prisma.DrinkCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.DrinkUpsertWithWhereUniqueWithoutCategoryInput | Prisma.DrinkUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.DrinkCreateManyCategoryInputEnvelope
  set?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  disconnect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  delete?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  connect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  update?: Prisma.DrinkUpdateWithWhereUniqueWithoutCategoryInput | Prisma.DrinkUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.DrinkUpdateManyWithWhereWithoutCategoryInput | Prisma.DrinkUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.DrinkScalarWhereInput | Prisma.DrinkScalarWhereInput[]
}

export type DrinkUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput> | Prisma.DrinkCreateWithoutCategoryInput[] | Prisma.DrinkUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.DrinkCreateOrConnectWithoutCategoryInput | Prisma.DrinkCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.DrinkUpsertWithWhereUniqueWithoutCategoryInput | Prisma.DrinkUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.DrinkCreateManyCategoryInputEnvelope
  set?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  disconnect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  delete?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  connect?: Prisma.DrinkWhereUniqueInput | Prisma.DrinkWhereUniqueInput[]
  update?: Prisma.DrinkUpdateWithWhereUniqueWithoutCategoryInput | Prisma.DrinkUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.DrinkUpdateManyWithWhereWithoutCategoryInput | Prisma.DrinkUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.DrinkScalarWhereInput | Prisma.DrinkScalarWhereInput[]
}

export type DrinkCreateWithoutCategoryInput = {
  name: string
  quantity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DrinkUncheckedCreateWithoutCategoryInput = {
  id?: number
  name: string
  quantity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DrinkCreateOrConnectWithoutCategoryInput = {
  where: Prisma.DrinkWhereUniqueInput
  create: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput>
}

export type DrinkCreateManyCategoryInputEnvelope = {
  data: Prisma.DrinkCreateManyCategoryInput | Prisma.DrinkCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type DrinkUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.DrinkWhereUniqueInput
  update: Prisma.XOR<Prisma.DrinkUpdateWithoutCategoryInput, Prisma.DrinkUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.DrinkCreateWithoutCategoryInput, Prisma.DrinkUncheckedCreateWithoutCategoryInput>
}

export type DrinkUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.DrinkWhereUniqueInput
  data: Prisma.XOR<Prisma.DrinkUpdateWithoutCategoryInput, Prisma.DrinkUncheckedUpdateWithoutCategoryInput>
}

export type DrinkUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.DrinkScalarWhereInput
  data: Prisma.XOR<Prisma.DrinkUpdateManyMutationInput, Prisma.DrinkUncheckedUpdateManyWithoutCategoryInput>
}

export type DrinkScalarWhereInput = {
  AND?: Prisma.DrinkScalarWhereInput | Prisma.DrinkScalarWhereInput[]
  OR?: Prisma.DrinkScalarWhereInput[]
  NOT?: Prisma.DrinkScalarWhereInput | Prisma.DrinkScalarWhereInput[]
  id?: Prisma.IntFilter<"Drink"> | number
  name?: Prisma.StringFilter<"Drink"> | string
  quantity?: Prisma.StringFilter<"Drink"> | string
  categoryId?: Prisma.IntFilter<"Drink"> | number
  createdAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Drink"> | Date | string
}

export type DrinkCreateManyCategoryInput = {
  id?: number
  name: string
  quantity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DrinkUpdateWithoutCategoryInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DrinkUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DrinkUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DrinkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  quantity?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["drink"]>

export type DrinkSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  quantity?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["drink"]>

export type DrinkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  quantity?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["drink"]>

export type DrinkSelectScalar = {
  id?: boolean
  name?: boolean
  quantity?: boolean
  categoryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DrinkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "quantity" | "categoryId" | "createdAt" | "updatedAt", ExtArgs["result"]["drink"]>
export type DrinkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type DrinkIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type DrinkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}

export type $DrinkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Drink"
  objects: {
    category: Prisma.$CategoryPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    quantity: string
    categoryId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["drink"]>
  composites: {}
}

export type DrinkGetPayload<S extends boolean | null | undefined | DrinkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DrinkPayload, S>

export type DrinkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DrinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DrinkCountAggregateInputType | true
  }

export interface DrinkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Drink'], meta: { name: 'Drink' } }
  /**
   * Find zero or one Drink that matches the filter.
   * @param {DrinkFindUniqueArgs} args - Arguments to find a Drink
   * @example
   * // Get one Drink
   * const drink = await prisma.drink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DrinkFindUniqueArgs>(args: Prisma.SelectSubset<T, DrinkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Drink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DrinkFindUniqueOrThrowArgs} args - Arguments to find a Drink
   * @example
   * // Get one Drink
   * const drink = await prisma.drink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DrinkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DrinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Drink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkFindFirstArgs} args - Arguments to find a Drink
   * @example
   * // Get one Drink
   * const drink = await prisma.drink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DrinkFindFirstArgs>(args?: Prisma.SelectSubset<T, DrinkFindFirstArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Drink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkFindFirstOrThrowArgs} args - Arguments to find a Drink
   * @example
   * // Get one Drink
   * const drink = await prisma.drink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DrinkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DrinkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Drinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Drinks
   * const drinks = await prisma.drink.findMany()
   * 
   * // Get first 10 Drinks
   * const drinks = await prisma.drink.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const drinkWithIdOnly = await prisma.drink.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DrinkFindManyArgs>(args?: Prisma.SelectSubset<T, DrinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Drink.
   * @param {DrinkCreateArgs} args - Arguments to create a Drink.
   * @example
   * // Create one Drink
   * const Drink = await prisma.drink.create({
   *   data: {
   *     // ... data to create a Drink
   *   }
   * })
   * 
   */
  create<T extends DrinkCreateArgs>(args: Prisma.SelectSubset<T, DrinkCreateArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Drinks.
   * @param {DrinkCreateManyArgs} args - Arguments to create many Drinks.
   * @example
   * // Create many Drinks
   * const drink = await prisma.drink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DrinkCreateManyArgs>(args?: Prisma.SelectSubset<T, DrinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Drinks and returns the data saved in the database.
   * @param {DrinkCreateManyAndReturnArgs} args - Arguments to create many Drinks.
   * @example
   * // Create many Drinks
   * const drink = await prisma.drink.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Drinks and only return the `id`
   * const drinkWithIdOnly = await prisma.drink.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DrinkCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DrinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Drink.
   * @param {DrinkDeleteArgs} args - Arguments to delete one Drink.
   * @example
   * // Delete one Drink
   * const Drink = await prisma.drink.delete({
   *   where: {
   *     // ... filter to delete one Drink
   *   }
   * })
   * 
   */
  delete<T extends DrinkDeleteArgs>(args: Prisma.SelectSubset<T, DrinkDeleteArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Drink.
   * @param {DrinkUpdateArgs} args - Arguments to update one Drink.
   * @example
   * // Update one Drink
   * const drink = await prisma.drink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DrinkUpdateArgs>(args: Prisma.SelectSubset<T, DrinkUpdateArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Drinks.
   * @param {DrinkDeleteManyArgs} args - Arguments to filter Drinks to delete.
   * @example
   * // Delete a few Drinks
   * const { count } = await prisma.drink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DrinkDeleteManyArgs>(args?: Prisma.SelectSubset<T, DrinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Drinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Drinks
   * const drink = await prisma.drink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DrinkUpdateManyArgs>(args: Prisma.SelectSubset<T, DrinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Drinks and returns the data updated in the database.
   * @param {DrinkUpdateManyAndReturnArgs} args - Arguments to update many Drinks.
   * @example
   * // Update many Drinks
   * const drink = await prisma.drink.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Drinks and only return the `id`
   * const drinkWithIdOnly = await prisma.drink.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DrinkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DrinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Drink.
   * @param {DrinkUpsertArgs} args - Arguments to update or create a Drink.
   * @example
   * // Update or create a Drink
   * const drink = await prisma.drink.upsert({
   *   create: {
   *     // ... data to create a Drink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Drink we want to update
   *   }
   * })
   */
  upsert<T extends DrinkUpsertArgs>(args: Prisma.SelectSubset<T, DrinkUpsertArgs<ExtArgs>>): Prisma.Prisma__DrinkClient<runtime.Types.Result.GetResult<Prisma.$DrinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Drinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkCountArgs} args - Arguments to filter Drinks to count.
   * @example
   * // Count the number of Drinks
   * const count = await prisma.drink.count({
   *   where: {
   *     // ... the filter for the Drinks we want to count
   *   }
   * })
  **/
  count<T extends DrinkCountArgs>(
    args?: Prisma.Subset<T, DrinkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DrinkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Drink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DrinkAggregateArgs>(args: Prisma.Subset<T, DrinkAggregateArgs>): Prisma.PrismaPromise<GetDrinkAggregateType<T>>

  /**
   * Group by Drink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DrinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DrinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DrinkGroupByArgs['orderBy'] }
      : { orderBy?: DrinkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DrinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Drink model
 */
readonly fields: DrinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Drink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DrinkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  category<T extends Prisma.CategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__CategoryClient<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Drink model
 */
export interface DrinkFieldRefs {
  readonly id: Prisma.FieldRef<"Drink", 'Int'>
  readonly name: Prisma.FieldRef<"Drink", 'String'>
  readonly quantity: Prisma.FieldRef<"Drink", 'String'>
  readonly categoryId: Prisma.FieldRef<"Drink", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Drink", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Drink", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Drink findUnique
 */
export type DrinkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter, which Drink to fetch.
   */
  where: Prisma.DrinkWhereUniqueInput
}

/**
 * Drink findUniqueOrThrow
 */
export type DrinkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter, which Drink to fetch.
   */
  where: Prisma.DrinkWhereUniqueInput
}

/**
 * Drink findFirst
 */
export type DrinkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter, which Drink to fetch.
   */
  where?: Prisma.DrinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drinks to fetch.
   */
  orderBy?: Prisma.DrinkOrderByWithRelationInput | Prisma.DrinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Drinks.
   */
  cursor?: Prisma.DrinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Drinks.
   */
  distinct?: Prisma.DrinkScalarFieldEnum | Prisma.DrinkScalarFieldEnum[]
}

/**
 * Drink findFirstOrThrow
 */
export type DrinkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter, which Drink to fetch.
   */
  where?: Prisma.DrinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drinks to fetch.
   */
  orderBy?: Prisma.DrinkOrderByWithRelationInput | Prisma.DrinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Drinks.
   */
  cursor?: Prisma.DrinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Drinks.
   */
  distinct?: Prisma.DrinkScalarFieldEnum | Prisma.DrinkScalarFieldEnum[]
}

/**
 * Drink findMany
 */
export type DrinkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter, which Drinks to fetch.
   */
  where?: Prisma.DrinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drinks to fetch.
   */
  orderBy?: Prisma.DrinkOrderByWithRelationInput | Prisma.DrinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Drinks.
   */
  cursor?: Prisma.DrinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drinks.
   */
  skip?: number
  distinct?: Prisma.DrinkScalarFieldEnum | Prisma.DrinkScalarFieldEnum[]
}

/**
 * Drink create
 */
export type DrinkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * The data needed to create a Drink.
   */
  data: Prisma.XOR<Prisma.DrinkCreateInput, Prisma.DrinkUncheckedCreateInput>
}

/**
 * Drink createMany
 */
export type DrinkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Drinks.
   */
  data: Prisma.DrinkCreateManyInput | Prisma.DrinkCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Drink createManyAndReturn
 */
export type DrinkCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * The data used to create many Drinks.
   */
  data: Prisma.DrinkCreateManyInput | Prisma.DrinkCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Drink update
 */
export type DrinkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * The data needed to update a Drink.
   */
  data: Prisma.XOR<Prisma.DrinkUpdateInput, Prisma.DrinkUncheckedUpdateInput>
  /**
   * Choose, which Drink to update.
   */
  where: Prisma.DrinkWhereUniqueInput
}

/**
 * Drink updateMany
 */
export type DrinkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Drinks.
   */
  data: Prisma.XOR<Prisma.DrinkUpdateManyMutationInput, Prisma.DrinkUncheckedUpdateManyInput>
  /**
   * Filter which Drinks to update
   */
  where?: Prisma.DrinkWhereInput
  /**
   * Limit how many Drinks to update.
   */
  limit?: number
}

/**
 * Drink updateManyAndReturn
 */
export type DrinkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * The data used to update Drinks.
   */
  data: Prisma.XOR<Prisma.DrinkUpdateManyMutationInput, Prisma.DrinkUncheckedUpdateManyInput>
  /**
   * Filter which Drinks to update
   */
  where?: Prisma.DrinkWhereInput
  /**
   * Limit how many Drinks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Drink upsert
 */
export type DrinkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * The filter to search for the Drink to update in case it exists.
   */
  where: Prisma.DrinkWhereUniqueInput
  /**
   * In case the Drink found by the `where` argument doesn't exist, create a new Drink with this data.
   */
  create: Prisma.XOR<Prisma.DrinkCreateInput, Prisma.DrinkUncheckedCreateInput>
  /**
   * In case the Drink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DrinkUpdateInput, Prisma.DrinkUncheckedUpdateInput>
}

/**
 * Drink delete
 */
export type DrinkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
  /**
   * Filter which Drink to delete.
   */
  where: Prisma.DrinkWhereUniqueInput
}

/**
 * Drink deleteMany
 */
export type DrinkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Drinks to delete
   */
  where?: Prisma.DrinkWhereInput
  /**
   * Limit how many Drinks to delete.
   */
  limit?: number
}

/**
 * Drink without action
 */
export type DrinkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Drink
   */
  select?: Prisma.DrinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Drink
   */
  omit?: Prisma.DrinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DrinkInclude<ExtArgs> | null
}
